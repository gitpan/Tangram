=head1 NAME

Tangram::Schema - describe a system of persistent classes

=head1 SYNOPSIS

   use Tangram;

   $schema = Tangram::Schema->new( $hashref );

   Tangram::Relational->connect( $schema, ... );

   # write SQL to FILE
   $schema->deploy( \*FILE );

   # write SQL to STDOUT
   $schema->deploy();
   

=head1 DESCRIPTION

A Schema contains all the information about the persistent aspects of
a system of classes. That information is used to perform the mapping
between OO constructs and a relational database.

Schema objects are initialized from a nested data structure called a
schema hash. The general structure of the schema hash is described
here.

The resulting Schema object becomes the owner of the schema hash
passed to new(). The hash may not be modified afterwards, and no
assumptions can be made regarding its content.

=head1 CLASS METHODS

=head2 new

   $schema = Tangram::Schema->new( $hash );

Returns a new Schema object.

The newly created Schema object becomes the owner of the hash,
which can no longer be modified nor reused by client code.

The schema hash describes the persistent aspects of a system of
classes. It is a multilevel data structure.

=over 4

=item 1

The first level of the hash contains information that is relevant to
the system as a whole.

=item 2

The second level contains information on a per-class basis.

=item 3

The third level contains information about the individual fields in a
class. That information depends on the type of the field and is not
documented here; see L<field hash> for a list of predefined
persistent types.

=back

=head2 Global properties

The first level of the schema hash describes aspects that are global
to a system of persistent classes. It has the following aspect:

   {
      classes =>
     [
        Identity =>
         {
            table => 'IdentityState',
         abstract => 1
         },

         NaturalPerson =>
         {
            bases => [ qw( Identity ) ],
         },

         LegalPerson =>
         {
            bases => [ qw( Identity ) ],
         },
      ],

      make_object => sub { ... },
      set_id => sub { ... }
      get_id => sub { ... }
      normalize => sub { ... },

      control => '...'

      sql => { ... },
   }

C<classes> is an array called the L<class registry>. It contains a
description of each persistent class.

C<make_object> contains a reference to a closure that returns a
new object of a given class. This field is optional: by default,
Tangram calls class method new().

C<set_id> and C<get_id> are used together to associate an object ID
with a persistent object. By default, Tangram converts a reference to
an object to a unique integer value by evaluating the expression C<0
+ $obj>. The result is used as a key in a hash contained in the
Storage object. The values in that hash are the object IDs.

If any of your classes use overloading, this approach will not work
and you will need to supply your own get/set_id methods.

C<control> is the name of a table that has a single row, containing
the major and minor version numbers of the Tangram that created
the storage, and the highest allocated object id. It defaults
to 'Tangram'.

Optional field C<normalize> contains a subroutine that's called to
transform classnames and fieldnames into table and column names. The
function is called with two arguments; the name to be transformed, and
a 'type' argument (currently one of 'tablename' or 'fieldname'). The
return value should be the transformed string.

Note that it is expected that the normalize sub will return identical
strings with identical arguments, that
C<normalize(normalize($string, $flag), $flag) eq normalize($string, $flag)> 

Optional field C<sql> contains a hash that can be used to customize
some of the SQL generated by Tangram. That hash has the following
fields:

=over 4

=item * default_null

=item * id

=item * cid

=item * cid_size

=item * oid

=item * table_type

=back

All the fields are optional.

C<default_null> can be used to deal with those databases that don't
support the explicit 'NULL' specifier in column definitions. Defaults
to 'NULL'.

The other fields are related to the SQL types that Tangram uses to
store meta-information.

Object ids encode the type of the object. Tangram assigns a class id
to each persistent concrete class within a Schema. When an object is
inserted, Tangram allocates a unique integer from a class-specific
allocator, then appends the class id to it. Thus the object id for a
NaturalPerson may look like C<270005>, where C<0005> is the class
id.

Field C<id> contains the SQL type that is used to map an entire object
id. It defaults to 'INTEGER'.

Field C<cid> contains the SQL type that is used to map a class id. It
defaults to 'INTEGER'.

Field C<cid_size> contains the number of decimal positions that the
class id occupies within the object id. It defaults to '4'.

Field C<oid> contains the SQL type that is used to store the
class-specific object counters that are used in the id generation
process. It defaults to 'INTEGER'.

Field C<table_type> is a string that if set, will be appended to all
CREATE TABLE commands with TYPE=x.  For instance, to use transactions
with MySQL-Max or the version of MySQL in Debian Woody, set
C<table_type> to C<InnoDB>, and (re)deploy your database.

=head2 class registry

The class registry is a hash containing one entry per persistent
class. The key is the class name, the value is a reference to a hash
called the class hash. It contains information on how to map the
class.

The class hash has the following fields:

=over 4

=item * abstract

=item * bases

=item * fields

=item * table

=item * table_type

=item * id

=back

Field C<abstract> contains a boolean that should be true if the class
is abstract. If this field is not present, the class is considered to
be concrete.

Field C<bases> contains a reference to an array of base classes.

Field C<fields> contains a reference to the L<field hash>.

Field C<table> sets the name of the table that Tangram should use to store
the state of objects pertaining to this class. This field is optional:
it defaults to the class name. If the class name is not an acceptable
SQL table identifier, you will need to set this field.

Field C<table_type> sets the type of the table, for instance, the
storage back-end to the RDBMS or storage format; it specifies on a
per-table basis what the C<table_type> attribute of the schema
defines.  You almost certainly don't want to set this on a per-table
basis.

Field C<id> contains an integer identifier for this class. That
identifier must be unique within the same schema. If this field
is not present, Tangram sets it to the last class id plus one.

=head2 field hash

Each persistent type is identified by a 'typetag', e.g. C<int>, C<string>
or C<array>.

All the persistent fields of a given type are grouped
together inside the field hash, where the typetag is used as a
key. The individual fields are specified in an array or a hash, whose
layout is type-dependant. For example:

   fields =>
   {
      string   => [ qw( firstName name ) ],
      int      => [ qw( age ) ],
      ref      => { partner => { null => 1 } },
      array    => { children => 'NaturalPerson' },
   },

The typetag not only specifies the type of a field, but also the way
in which it should be mapped to SQL constructs. Sometimes the same
Perl type lends itself to more than one mapping, for example there are
at least two plausible ways of mapping a Perl array
(see L<Tangram::Array> and L<Tangram::IntrArray>).

Tangram's persistent type system is extensible, allowing you to mount
your own types and make them persistent. All you have to do is to
register your type and provide mapping code. See L<Tangram::Type>.

Tangram comes with built-in support for the following types:

* string, int, real: see L<Tangram::Scalar>

* reference : see L<Tangram::Ref>

* array : see L<Tangram::Array>, L<Tangram::IntrArray>

* Set::Object : see L<Tangram::Set>, L<Tangram::IntrSet>

=head1 INSTANCE METHODS

=head2 deploy

This method is deprecated. See L<Tangram::Relational>.

=head2 retreat

This method is deprecated. See L<Tangram::Relational>.
