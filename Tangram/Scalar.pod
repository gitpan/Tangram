=head1 NAME

Tangram::Scalar - map scalar fields

=head1 SYNOPSIS

	use Tangram;

	# or
	use Tangram::Core;

	$schema = Tangram::Schema->new(
	    classes => { NaturalPerson => { fields => {
			string => [ qw( name firstName gender ) ],
			int => [ qw( age ) ],
			real => [ qw( height weight ) ],

	# or

	    classes => { NaturalPerson => { fields => {
			string =>
			{
				name 	=> { sql => 'VARCHAR(100)' },
				1stname => { col => 'firstName', sql => 'VARCHAR(100) NULL' },
				gender 	=> undef()
			},

			# etc etc etc

	use Tangram::RawDate;
	use Tangram::RawTime;
	use Tangram::RawDateTime;

	$schema = Tangram::Schema->new(
	    classes => { NaturalPerson => { fields => {
			rawdatetime => [ qw( birth death ) ],
			rawdate => [ qw( beginVacation endVacation ) ],
			rawtime => [ qw( breakfast lunch dinner ) ],


=head1 DESCRIPTION

Classes Tangram::String, ::Int and ::Real and ::Ref are responsible
for mapping the various subtypes of scalars. The first three mappings
are documented here since they differ very little. See L<Tangram::Ref>
for information on mapping references.

Tangram::String uses DBI's quote() method to quote strings if that
method is available, thus making it possible to store binary objects
or multiline text in databases that support it (thanks to Marian Kelc
<marian.kelc@ruhr-uni-bochum.de> for suggesting this improvement).

Classes Tangram::RawDate, ::RawTime and ::RawDateTime are responsible
for mapping strings to SQL date or time types. These classes are not
imported by Tangram.pm, thus they must be explicitly imported via a
C<use> directive.

The three predefined typetags C<string>, C<int> and C<real> are for
the corresponding Perl scalar subtypes.

The three predefined typetags C<rawdate>, C<rawtime> and
C<rawdatetime> are for mapping strings to SQL date/time types. 'Raw'
means that Tangram doesn't attempt to interpret the strings, it merely
passes them down to DBI.

Each scalar field is stored in a single column of the table associated
to the class.

The persistent fields may be specified either as a hash or as an array
of field names.

In the hash form, each entry consists in a field name and an
associated option hash. The option hash may contain the following
fields:

=over 4

=item * col

=item * sql

=back

C<col> sets the name of the column used to store the field's
value. This field is optional, it defaults to the persistent field
name. Override if the field name is not an acceptable SQL column name.

C<sql> sets the SQL type of the column. Used by Schema::deploy() when
initializing a database. Defaults to 'VARCHAR(255) NULL' for strings,
'INT NULL' for ints and 'REAL NULL' for reals.

The persistent fields may also be specified as an array of strings, in
which case the defaults are used.





